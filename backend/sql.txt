--profile--
-- Create profiles table
create table profiles (
  id uuid references auth.users on delete cascade primary key,
  name text,
  email text,
  role text check (role in ('Provider', 'User')),
  avatar_url text,
  location jsonb,
  phone text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Enable RLS (Row Level Security)
alter table profiles enable row level security;

-- Create policies
create policy "Users can view their own profile"
  on profiles for select
  using ( auth.uid() = id );

create policy "Users can update their own profile"
  on profiles for update
  using ( auth.uid() = id );

-- Create storage bucket for avatars
insert into storage.buckets (id, name) 
values ('avatars', 'avatars');

-- Create policy to allow authenticated users to upload avatars
create policy "Avatar images are publicly accessible"
  on storage.objects for select
  using ( bucket_id = 'avatars' );

create policy "Users can upload avatar image"
  on storage.objects for insert
  with check ( bucket_id = 'avatars' AND auth.role() = 'authenticated' );

--properties--
-- Create properties table
create table properties (
    id uuid default uuid_generate_v4() primary key,
    provider_id uuid references auth.users not null,
    name text not null,
    description text,
    location jsonb not null,
    hourly_rate decimal not null,
    amenities text[],
    photos text[],
    status text default 'active' check (status in ('active', 'inactive', 'maintenance')),
    created_at timestamptz default now(),
    updated_at timestamptz default now()
);

-- Enable RLS
alter table properties enable row level security;

-- Create policies
create policy "Providers can create their own properties"
    on properties for insert
    with check (auth.uid() = provider_id);

create policy "Providers can update their own properties"
    on properties for update
    using (auth.uid() = provider_id);

create policy "Properties are viewable by everyone"
    on properties for select
    using (true);

-- Create storage bucket for property photos
insert into storage.buckets (id, name)
values ('property-photos', 'property-photos');

-- Create policies for property photos
create policy "Property photos are publicly accessible"
    on storage.objects for select
    using (bucket_id = 'property-photos');

create policy "Providers can upload property photos"
    on storage.objects for insert
    with check (bucket_id = 'property-photos' AND auth.role() = 'authenticated');

--reviews--
-- Create reviews table
create table reviews (
    id uuid default uuid_generate_v4() primary key,
    property_id uuid references properties not null,
    user_id uuid references auth.users not null,
    rating integer check (rating >= 1 and rating <= 5) not null,
    comment text,
    created_at timestamptz default now(),
    updated_at timestamptz default now(),
    -- Ensure one review per user per property
    unique(property_id, user_id)
);

-- Enable RLS
alter table reviews enable row level security;

-- Create policies
create policy "Users can create their own reviews"
    on reviews for insert
    with check (auth.uid() = user_id);

create policy "Users can update their own reviews"
    on reviews for update
    using (auth.uid() = user_id);

create policy "Reviews are viewable by everyone"
    on reviews for select
    using (true);

--availability_slots--
-- Create availability slots table
create table availability_slots (
    id uuid default uuid_generate_v4() primary key,
    property_id uuid references properties not null,
    start_time timestamptz not null,
    end_time timestamptz not null,
    status text default 'available' check (status in ('available', 'booked', 'blocked')),
    price_override decimal,
    created_at timestamptz default now(),
    updated_at timestamptz default now(),
    -- Ensure end time is after start time
    constraint valid_time_range check (end_time > start_time),
    -- Prevent overlapping slots for the same property
    constraint no_overlapping_slots unique (property_id, start_time, end_time)
);

-- Enable RLS
alter table availability_slots enable row level security;

-- Create policies
create policy "Providers can manage their property slots"
    on availability_slots for all
    using (
        exists (
            select 1 from properties
            where properties.id = availability_slots.property_id
            and properties.provider_id = auth.uid()
        )
    );

create policy "Users can view available slots"
    on availability_slots for select
    using (status = 'available');



--Bookings--
-- Create bookings table
create table bookings (
    id uuid default uuid_generate_v4() primary key,
    user_id uuid references auth.users not null,
    property_id uuid references properties not null,
    slot_id uuid references availability_slots not null,
    booking_price decimal not null,
    special_requests text,
    status text default 'pending' check (status in ('pending', 'confirmed', 'cancelled', 'completed')),
    created_at timestamptz default now(),
    updated_at timestamptz default now()
);

-- Enable RLS
alter table bookings enable row level security;

-- Create policies
create policy "Users can view their own bookings"
    on bookings for select
    using (auth.uid() = user_id);

create policy "Users can create their own bookings"
    on bookings for insert
    with check (auth.uid() = user_id);

create policy "Users can update their own bookings"
    on bookings for update
    using (auth.uid() = user_id);

-- Add foreign key to availability_slots
alter table availability_slots
add column booking_id uuid references bookings;

